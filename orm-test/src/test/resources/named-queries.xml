<?xml version="1.0" encoding="UTF-8"?>
<!-- SQL/JPQL 命名查询配置文件 -->
<queries>
	<query name = "getUserByName" type="jpql" tag="dataSource">
	<![CDATA[
		   select name as text,id as value from Person where name=:name and id=:id $SqlExpression:orderBy
	]]>
	</query>
	<query name = "getUserById" type="sql">
	<![CDATA[
		   select * from Person_table where name=:name<string>
	]]>
	</query>
	<query name = "testIn" type="sql" fetch-size="100" >
	<![CDATA[
		   select count(*) from Person_table where id in (:names<int>)
	]]>
	</query>
	<query name = "testComplex" type="sql">
	<![CDATA[
		   select :column     from root where id1 in (:id<int>)  and code=:code<string> and the_name like :name<string$> and id3=:id3 and id4=:id4 order by :orderBy
	]]>
	</query>
	<query name = "testComplex2" type="sql">
	<![CDATA[
		   select :column<sql> from root where id1 in (:id<int>) and code=:code<string> and  the_name like :name<$string> and id3=:id3 and id4=:id4 order by :orderBy<sql>
	]]>
	</query>
	<query name = "testPage" type="sql">
	<![CDATA[
		   select * from Root
	]]>
	</query>
	<query name = "testOracleTree_create" type="sql">
		<![CDATA[
		create table sys_resource(
		   id   int,
		   resource_id int,
		   parent_id   int
		)
		]]>
	</query>
	<query name = "testOracleTree#oracle" type="sql">
		<![CDATA[
				select rs.*,f.name
  				from sys_resource rs
  				left join Foo f on rs.id=f.id
  				where rs.id!=3
 				START WITH rs.resource_id IN (:value)
				CONNECT BY PRIOR rs.resource_id = rs.parent_id
		]]>
	</query>
	<query name = "testOracleTree#mysql" type="sql">
		<![CDATA[
				select rs.*,f.name
  				from sys_resource rs
  				left join Foo f on rs.id=f.id
  				where rs.id!=3 and rs.parent_id in (:value)
		]]>
	</query>
	<query name = "testOracleTree#postgresql" type="sql">
		<![CDATA[
				select rs.*,f.name
  				from sys_resource rs
  				left join Foo f on rs.id=f.id
  				where rs.id!=3 and rs.parent_id in (:value)
		]]>
	</query>

	<query name = "myTest" type="sql">
	<![CDATA[
select t.price_id priceId,
       r.itemid,
       r.itemname,
       r.item,
       r.servicespecid,
       r.servicespecname,
       t.usage_id usageId,
       t.total condUsageCount,
       t.scheme_id schemeId,
       t.adjustrate_id adjustRateId
  from (select q.item_id itemId,
               q.name itemName,
               s.service_spec_id serviceSpecId,
               s.name serviceSpecName,
               '[' || q.item_id || ']' || q.name item
          from PM_PRICE_EVENT q
          left join PM_SERVICE_SPEC s on q.service_spec_id =
                                         s.service_spec_id
         where q.item_class = 1
         order by s.service_spec_id) r
 inner join (select f.price_id,
                    f.item_id,
                    f.usage_id,
                    f.total,
                    f.scheme_id,
                    s.adjustrate_id
               from (select g.price_id,
                            g.item_id,
                            g.usage_id,
                            g.total,
                            k.scheme_id,
                            k.prototype_price_id
                       from pm_price k
                       left join (select m.price_id,
                                        m.item_id,
                                        m.usage_id,
                                        CASE
                                          WHEN m.usage_price_type = 0 THEN
                                           0
                                          ELSE
                                           count(*)
                                        END total
                                   from pm_usage_price m
                                   left join Pm_Usage_Price_Pkg n on n.price_id =
                                                                     m.price_id
                                                                 and n.item_id =
                                                                     m.item_id
                                  group by m.price_id,
                                           m.item_id,
                                           m.usage_id,
                                           m.usage_price_type) g on g.price_id =
                                                                    k.price_id
                      where g.price_id = 1145) f
               left join (select scheme_id, item_id, adjustrate_id
                           from PM_USAGE_ADJSCHEME_DETAIL v
                          where scheme_id = 1003) s on s.item_id = f.item_id) t on r.itemid =
                                                                                   t.item_id
 order by r.servicespecid, usageId

	]]>
	</query>
 
	<query name = "testPaging" type="sql">
	<![CDATA[
		   select * from leaf
	]]>
	</query>
	
	<query name = "testDynamicOmit" type="sql">
	<![CDATA[
		   select * from leaf where name =:name and childid = :childid<int>
	]]>
	</query>
 
	<query name = "testDynamicSegments" type="sql">
	<![CDATA[
		   select :column<sql> from leaf order by :orderBy<sql>
	]]>
	</query>
 
	<query name = "testDynamicSegmentsForTableName" type="sql">
	<![CDATA[
		   select id as text, name as value from :tableName<sql>
	]]>
	</query>
 
</queries>