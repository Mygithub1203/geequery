/* Generated By:JavaCC: Do not edit this line. StSqlParserTokenManager.java */
package jef.database.jsqlparser.parser;
import java.util.ArrayList;
import java.util.List;
import jef.database.jsqlparser.expression.BinaryExpression;
import jef.database.jsqlparser.expression.DoubleValue;
import jef.database.jsqlparser.expression.Expression;
import jef.database.jsqlparser.expression.Function;
import jef.database.jsqlparser.expression.Over;
import jef.database.jsqlparser.expression.InverseExpression;
import jef.database.jsqlparser.expression.JdbcParameter;
import jef.database.jsqlparser.expression.LongValue;
import jef.database.jsqlparser.expression.DateValue;
import jef.database.jsqlparser.expression.TimeValue;
import jef.database.jsqlparser.expression.TimestampValue;
import jef.database.jsqlparser.expression.NullValue;
import jef.database.jsqlparser.expression.Parenthesis;
import jef.database.jsqlparser.expression.StringValue;
import jef.database.jsqlparser.expression.CaseExpression;
import jef.database.jsqlparser.expression.WhenClause;
import jef.database.jsqlparser.expression.AnyComparisonExpression;
import jef.database.jsqlparser.expression.AllComparisonExpression;
import jef.database.jsqlparser.expression.operators.arithmetic.Addition;
import jef.database.jsqlparser.expression.operators.arithmetic.BitwiseAnd;
import jef.database.jsqlparser.expression.operators.arithmetic.BitwiseOr;
import jef.database.jsqlparser.expression.operators.arithmetic.BitwiseXor;
import jef.database.jsqlparser.expression.operators.arithmetic.Concat;
import jef.database.jsqlparser.expression.operators.arithmetic.Division;
import jef.database.jsqlparser.expression.operators.arithmetic.Mod;
import jef.database.jsqlparser.expression.operators.arithmetic.Multiplication;
import jef.database.jsqlparser.expression.operators.arithmetic.Subtraction;
import jef.database.jsqlparser.expression.operators.conditional.AndExpression;
import jef.database.jsqlparser.expression.operators.conditional.OrExpression;
import jef.database.jsqlparser.expression.operators.relational.Between;
import jef.database.jsqlparser.expression.operators.relational.EqualsTo;
import jef.database.jsqlparser.expression.operators.relational.ExpressionList;
import jef.database.jsqlparser.expression.operators.relational.GreaterThan;
import jef.database.jsqlparser.expression.operators.relational.GreaterThanEquals;
import jef.database.jsqlparser.expression.operators.relational.InExpression;
import jef.database.jsqlparser.expression.operators.relational.IsNullExpression;
import jef.database.jsqlparser.expression.operators.relational.ItemsList;
import jef.database.jsqlparser.expression.operators.relational.LikeExpression;
import jef.database.jsqlparser.expression.operators.relational.ExistsExpression;
import jef.database.jsqlparser.expression.operators.relational.Matches;
import jef.database.jsqlparser.expression.operators.relational.MinorThan;
import jef.database.jsqlparser.expression.operators.relational.MinorThanEquals;
import jef.database.jsqlparser.expression.operators.relational.NotEqualsTo;
import jef.database.jsqlparser.statement.select.StartWithExpression;
import jef.database.jsqlparser.schema.Column;
import jef.database.jsqlparser.schema.Table;
import jef.database.jsqlparser.statement.Statement;
import jef.database.jsqlparser.statement.create.table.ColDataType;
import jef.database.jsqlparser.statement.create.table.ColumnDefinition;
import jef.database.jsqlparser.statement.create.table.CreateTable;
import jef.database.jsqlparser.statement.create.table.Index;
import jef.database.jsqlparser.statement.delete.Delete;
import jef.database.jsqlparser.statement.drop.Drop;
import jef.database.jsqlparser.statement.insert.Insert;
import jef.database.jsqlparser.statement.replace.Replace;
import jef.database.jsqlparser.statement.select.AllColumns;
import jef.database.jsqlparser.statement.select.AllTableColumns;
import jef.database.jsqlparser.statement.select.Distinct;
import jef.database.jsqlparser.statement.select.FromItem;
import jef.database.jsqlparser.statement.select.Join;
import jef.database.jsqlparser.statement.select.SubJoin;
import jef.database.jsqlparser.statement.select.Limit;
import jef.database.jsqlparser.statement.select.OrderByElement;
import jef.database.jsqlparser.statement.select.PlainSelect;
import jef.database.jsqlparser.statement.select.OrderBy;
import jef.database.jsqlparser.statement.select.Select;
import jef.database.jsqlparser.statement.select.SelectBody;
import jef.database.jsqlparser.statement.select.SelectExpressionItem;
import jef.database.jsqlparser.statement.select.SelectItem;
import jef.database.jsqlparser.statement.select.SubSelect;
import jef.database.jsqlparser.statement.select.Top;
import jef.database.jsqlparser.statement.select.Union;
import jef.database.jsqlparser.statement.select.WithItem;
import jef.database.jsqlparser.statement.truncate.Truncate;
import jef.database.jsqlparser.statement.update.Update;
import jef.database.jsqlparser.expression.Interval;
import jef.database.jsqlparser.expression.Child;

/** Token Manager. */
public class StSqlParserTokenManager implements StSqlParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x1000000L) != 0L)
            return 12;
         if ((active0 & 0xf7ff7fffffffffe0L) != 0L || (active1 & 0x1f7L) != 0L)
         {
            jjmatchedKind = 78;
            return 47;
         }
         if ((active1 & 0x8000000000L) != 0L)
            return 16;
         if ((active0 & 0x800000000000L) != 0L || (active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 78;
            return 9;
         }
         if ((active1 & 0x10000000000L) != 0L)
            return 19;
         return -1;
      case 1:
         if ((active0 & 0x804c0000220fe0L) != 0L || (active1 & 0x22L) != 0L)
            return 47;
         if ((active1 & 0x8L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 78;
               jjmatchedPos = 1;
            }
            return 8;
         }
         if ((active0 & 0xf77fb3ffffddf000L) != 0L || (active1 & 0x1d5L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 78;
               jjmatchedPos = 1;
            }
            return 47;
         }
         return -1;
      case 2:
         if ((active0 & 0xff000L) != 0L)
            return 47;
         if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 2;
            return 7;
         }
         if ((active0 & 0xf7fffffffff00000L) != 0L || (active1 & 0x1f7L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 2;
            return 47;
         }
         return -1;
      case 3:
         if ((active0 & 0xf7fffff000000000L) != 0L || (active1 & 0x3fL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 78;
               jjmatchedPos = 3;
            }
            return 47;
         }
         if ((active0 & 0xffff00000L) != 0L || (active1 & 0x1c0L) != 0L)
            return 47;
         return -1;
      case 4:
         if ((active0 & 0x17ff000000000L) != 0L || (active1 & 0x58L) != 0L)
            return 47;
         if ((active0 & 0xf7fe800000000000L) != 0L || (active1 & 0x27L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 4;
            return 47;
         }
         return -1;
      case 5:
         if ((active0 & 0x7fe000000000000L) != 0L)
            return 47;
         if ((active0 & 0xf000800000000000L) != 0L || (active1 & 0x27L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 5;
            return 47;
         }
         return -1;
      case 6:
         if ((active0 & 0x8000800000000000L) != 0L || (active1 & 0x23L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 6;
            return 47;
         }
         if ((active0 & 0x7000000000000000L) != 0L || (active1 & 0x4L) != 0L)
            return 47;
         return -1;
      case 7:
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x21L) != 0L)
            return 47;
         if ((active0 & 0x800000000000L) != 0L || (active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 7;
            return 47;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
      case 37:
         return jjStopAtPos(0, 105);
      case 38:
         return jjStopAtPos(0, 101);
      case 40:
         return jjStopAtPos(0, 86);
      case 41:
         return jjStopAtPos(0, 87);
      case 42:
         return jjStopAtPos(0, 90);
      case 43:
         return jjStopAtPos(0, 102);
      case 44:
         return jjStopAtPos(0, 85);
      case 45:
         return jjStartNfaWithStates_0(0, 103, 16);
      case 46:
         return jjStartNfaWithStates_0(0, 88, 12);
      case 47:
         return jjStartNfaWithStates_0(0, 104, 19);
      case 59:
         return jjStopAtPos(0, 83);
      case 60:
         jjmatchedKind = 93;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x180000000L);
      case 61:
         return jjStopAtPos(0, 84);
      case 62:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case 63:
         return jjStopAtPos(0, 91);
      case 64:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
      case 94:
         return jjStopAtPos(0, 106);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x27020L, 0x0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x4000020000000040L, 0x0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x4000020000000L, 0x4L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x2000001100080L, 0x1L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x420000100080000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x408000000L, 0x0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800c0000200300L, 0x22L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa1_0(0x2000000L, 0x0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x100004800000L, 0x80L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1000000000408000L, 0x40L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x10600010000c00L, 0x100L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x8L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2001000000000000L, 0x0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x8000200010000L, 0x10L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x8000001080040000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x10000c000000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0x0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x2840000000L, 0x0L);
      case 123:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe80000000000L);
      case 124:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L);
      case 125:
         return jjStopAtPos(0, 108);
      default :
         return jjMoveNfa_0(10, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 94);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 62:
         if ((active1 & 0x100000000L) != 0L)
            return jjStopAtPos(1, 96);
         break;
      case 64:
         if ((active1 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 98);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1240801020000000L, active1, 0x80L);
      case 68:
      case 100:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStopAtPos(1, 107);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x600a020004110000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0x800000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x20c0000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x1100800800000L, active1, 0x1L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x100001000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x200L) != 0L)
         {
            jjmatchedKind = 9;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(1, 11, 47);
         return jjMoveStringLiteralDfa2_0(active0, 0x800c8000286000L, active1, 0x22L);
      case 79:
      case 111:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(1, 7, 47);
         return jjMoveStringLiteralDfa2_0(active0, 0x202048000L, active1, 0x4L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000010000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x400L) != 0L)
         {
            jjmatchedKind = 10;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8004410009000000L, active1, 0x8L);
      case 83:
      case 115:
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 5;
            jjmatchedPos = 1;
         }
         else if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 47);
         return jjMoveStringLiteralDfa2_0(active0, 0x400004000020000L, active1, 0L);
      case 84:
      case 116:
         if ((active1 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 109;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400000000010L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200400400000L, active1, 0x40L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(1, 6, 47);
         break;
      case 124:
         if ((active1 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 99);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(2, 17, 47);
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000000L, active1, 0L);
      case 68:
      case 100:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 47);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(2, 19, 47);
         return jjMoveStringLiteralDfa3_0(active0, 0x100440000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x40020d0000000L, active1, 0x100L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000004000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x1020000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000c002000000L, active1, 0x8L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 47);
         return jjMoveStringLiteralDfa3_0(active0, 0x20a000400400000L, active1, 0x40L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x100200000000L, active1, 0L);
      case 78:
      case 110:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStopAtPos(2, 111);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0x4L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10009000000L, active1, 0L);
      case 80:
      case 112:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(2, 18, 47);
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000000L, active1, 0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStopAtPos(2, 110);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000120100000L, active1, 0x81L);
      case 84:
      case 116:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(2, 15, 47);
         else if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(2, 16, 47);
         return jjMoveStringLiteralDfa3_0(active0, 0x5000200800200000L, active1, 0x22L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000000L, active1, 0L);
      case 89:
      case 121:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 14, 47);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x504000000000000L, active1, 0L);
      case 67:
      case 99:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 47);
         break;
      case 69:
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 47);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 47);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 47);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 47);
         return jjMoveStringLiteralDfa4_0(active0, 0x8a6c0000000000L, active1, 0x22L);
      case 72:
      case 104:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 47);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x40120000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 47);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000001000000000L, active1, 0x40L);
      case 77:
      case 109:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 47);
         break;
      case 78:
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 25, 47);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 47);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 47);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 47);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000004000000000L, active1, 0x4L);
      case 79:
      case 111:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 47);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L, active1, 0x8L);
      case 80:
      case 112:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 47);
         break;
      case 82:
      case 114:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(3, 72, 47);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0x10L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x30000000000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 47);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(3, 71, 47);
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L, active1, 0x1L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x1200010000000000L, active1, 0L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8008000000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 47);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 47);
         return jjMoveStringLiteralDfa5_0(active0, 0x4210000000000000L, active1, 0x4L);
      case 71:
      case 103:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 47);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L, active1, 0x1L);
      case 78:
      case 110:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 47);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 47);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000000L, active1, 0L);
      case 80:
      case 112:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 47);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 47);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 47);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 46, 47);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 67, 47);
         return jjMoveStringLiteralDfa5_0(active0, 0x1080000000000000L, active1, 0x22L);
      case 83:
      case 115:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(4, 70, 47);
         break;
      case 84:
      case 116:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 47);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 47);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 68, 47);
         return jjMoveStringLiteralDfa5_0(active0, 0x126000000000000L, active1, 0L);
      case 88:
      case 120:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 47);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x9000000000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0x4L);
      case 69:
      case 101:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 47);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 47);
         else if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 47);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 58, 47);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L);
      case 71:
      case 103:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 54, 47);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1L);
      case 83:
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 53, 47);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 57, 47);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2L);
      case 84:
      case 116:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 47);
         else if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 52, 47);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 55, 47);
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1L);
      case 69:
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 61, 47);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000000000L, active1, 0L);
      case 76:
      case 108:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 47);
         break;
      case 78:
      case 110:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 62, 47);
         break;
      case 84:
      case 116:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(6, 66, 47);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2L);
      case 69:
      case 101:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 63, 47);
         break;
      case 76:
      case 108:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 69, 47);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0L);
      case 84:
      case 116:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(7, 64, 47);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 78:
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 47, 47);
         break;
      case 84:
      case 116:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(8, 65, 47);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 47;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 8:
               case 27:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(27);
                  break;
               case 47:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(27);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 74)
                        kind = 74;
                     jjCheckNAddStates(0, 5);
                  }
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(34, 35);
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(29, 30);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 46)
                     jjCheckNAdd(12);
                  break;
               case 7:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(27);
                  break;
               case 9:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(27);
                  break;
               case 1:
                  if (curChar == 32)
                     jjAddStates(6, 7);
                  break;
               case 11:
                  if (curChar == 46)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAddTwoStates(12, 13);
                  break;
               case 14:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(15);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(15);
                  break;
               case 16:
                  if (curChar != 45)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(17);
                  break;
               case 17:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjCheckNAdd(17);
                  break;
               case 18:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 20:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 21:
                  if (curChar == 42)
                     jjCheckNAddStates(8, 10);
                  break;
               case 22:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(23, 21);
                  break;
               case 23:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(23, 21);
                  break;
               case 24:
                  if (curChar == 47 && kind > 77)
                     kind = 77;
                  break;
               case 25:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 28:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 29:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 30:
                  if (curChar != 39)
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(32, 30);
                  break;
               case 32:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(32, 30);
                  break;
               case 33:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 34:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddTwoStates(34, 35);
                  break;
               case 35:
                  if (curChar == 34 && kind > 82)
                     kind = 82;
                  break;
               case 37:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(11, 12);
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAddStates(0, 5);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 11);
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 15);
                  break;
               case 42:
                  if (curChar == 46)
                     jjCheckNAdd(43);
                  break;
               case 44:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(45);
                  break;
               case 45:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 73)
                     kind = 73;
                  jjCheckNAdd(45);
                  break;
               case 46:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 74)
                     kind = 74;
                  jjCheckNAdd(46);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 8:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(27);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 47:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(27);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  break;
               case 10:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  else if (curChar == 96)
                     jjCheckNAddTwoStates(37, 38);
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(27);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAdd(27);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 78)
                        kind = 78;
                     jjCheckNAddTwoStates(26, 27);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 0:
                  if ((0x200000002000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if ((0x200000002000000L & l) != 0L && kind > 59)
                     kind = 59;
                  break;
               case 3:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 4:
                  if ((0x80000000800L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 6:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 13:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(16, 17);
                  break;
               case 17:
                  if (kind > 76)
                     kind = 76;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
               case 23:
                  jjCheckNAddTwoStates(23, 21);
                  break;
               case 26:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAddTwoStates(26, 27);
                  break;
               case 27:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 78)
                     kind = 78;
                  jjCheckNAdd(27);
                  break;
               case 29:
                  jjCheckNAddTwoStates(29, 30);
                  break;
               case 32:
                  jjCheckNAddTwoStates(32, 30);
                  break;
               case 34:
                  jjAddStates(18, 19);
                  break;
               case 36:
                  if (curChar == 96)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 37:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 38:
                  if (curChar == 96 && kind > 82)
                     kind = 82;
                  break;
               case 43:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(20, 21);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 76)
                     kind = 76;
                  jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 20:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(20, 21);
                  break;
               case 22:
               case 23:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(23, 21);
                  break;
               case 29:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(29, 30);
                  break;
               case 32:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(32, 30);
                  break;
               case 34:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(18, 19);
                  break;
               case 37:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 12);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 47 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   40, 11, 41, 42, 43, 46, 1, 4, 21, 22, 24, 37, 38, 41, 42, 43, 
   14, 15, 34, 35, 44, 45, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
"\73", "\75", "\54", "\50", "\51", "\56", "\100", "\52", "\77", "\76", "\74", 
"\76\75", "\74\75", "\74\76", "\41\75", "\100\100", "\174\174", "\174", "\46", "\53", 
"\55", "\57", "\45", "\136", null, "\175", null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffe1L, 0xfffffffe47ffL, 
};
static final long[] jjtoSkip = {
   0x1eL, 0x3000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x3000L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[47];
private final int[] jjstateSet = new int[94];
protected char curChar;
/** Constructor. */
public StSqlParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public StSqlParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 47; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
