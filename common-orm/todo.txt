============== 确定已经解决的问题 ==============
读取Sequence initialValue=1000   allocationSize (OK)
关于vsMany和vsOne目前界限正在模糊，需要按照lazy和eager两种方式重新修改。(OK)
读取Table initialValue=1000   valueColumnName   pkColumnValue table   allocationSize (OK)
Hilo实现和 DB_AUTOINCREMENT_HILO （OK）
DB_SEQUENCE_STEP 0和-1的两种不同检测方式(OK)
全局的SequenceTable表名可定义(OK)
AutoIncreatmentCallBack大量使用Property优化(OK)
UUID实现支持removeDash (OK)
hilo模式下的cacheSize可缩小或干脆为1(OK)
Table init value的校准等问题(OK)
PRIMARY KEY的匹配方式(OK)
filterCondition右侧对多加载时的排序和结果限制问题 (OK)
当一个对象中指向同个目标的JoinDescrption配置不同时，被当做是相同的关联查询进行处理。(OK)
AnnotationValueCompare的处理（OK JDK自身已经实现得很好）
当多对一时，fetch=LAZY现在可以生效(OK)
当filterCondition等辅助描述被区分为多种关联时，(OK)
dubbo客户端能否指定URL? (Fixed, OK)
CXF-PLUS重构，补充测试案例，用法变化。(OK)
CXF下发现如将Object注册为JSON转换器，则List等Collection的反序列化数据会丢失，暂时关闭此功能(OK)
同维度下的映射关系分表+分库。。。。设计分析，是否需要改造（分析，暂无需改造，分表规则加载器可以支持）
RoutingConnection连接提交状态错误引起死锁（OK）
启动时metadata及其连接池可能被初始化2次的问题。(OK)
分表时，自增值生成提前，使其能作为分表参数所利用。分表时对于primitive值的有效性判断增强。(OK)
增加MAPPING函数等，简化分库分表规则配置。(OK)
支持按需建表(OK)
修复了ADV TABLE模式下自增生成的若干小错误。
缩小首次建表范围（OK），引发若干测试错误，采用表过滤机制解决。(OK)
不启用按需建表后，需要保留全范围或大范围建表功能（通过DateSpan可配置解决，OK）
修复关于使用FBIField造成单表更新和删除操作尝试绑定Query时空指针异常(OK)
分库分表聚合等支持、对分表分库后混合结果集进行支持（聚合、排序、distinct）OK
分表结果返回错误问题（OK）
Oracle/MSSQL分析函数支持（OK，支持解析）
验证DataObject/VarObject作为Json序列化（REST）和WebService（JAXB）发布时的字段问题。XMLTranilaent JAXB下会出现整个DataObject都是瞬态的，可以完全被忽略)(java序列化，因为DataObject中字段是临时的，故 会被忽略。)(JSON序列化反序列化)
验证Druid解析器是否支持MYSQL的一些写法问题(OK)
重构，将拼装从连接池上剥离(OK)；，将池检查逻辑内建到连接池上。(OK)
词法树的Clone问题。现在可以实现对词法树的安全改写了。(OK)
start with connect by的内存计算方案(OK,NativeQuery支持)
级联操作时两个字段不一致时的update/insert问题(从目前测试看来，API逻辑是正确的。是否检查...)(OK)
完善JEF的JMX监控(OK)
update语句中的set语句现在也可以根据表达式省略。(OK)
Batch的极限模式。(不返回值、性能分析等手段)、此外对于Batch可能需要统计并输出因为Sequence而消耗的时间（--），Oracle下的实现特殊优化 hint, no logging
——极限模式下：启用该数据库本身的特殊优化操作——no logging /*+APPEND */ 等。极限模式下不回写自增值等。 (OK,测试数据已收集)
仿照MyBatis，将包扫描和session初始化都用一个Bean来构造(OK)
@DataSource方式标注的表现在还不能通过SQL路由。(OK)


============== 基本上解决的问题 ==============
CXF 2.7.10提高了兼容性，但是CXF-Plus的ASM类产生的package-info不兼容 (无法重现，修订CXF-PLUS中的引用，怀疑还是和包冲突有关，修订，暂时算OK)
对启用表过滤机制后，造成无表输出后的查询返回空结果集场景进行支持和测试(应该OK 测试了一下增加案例，似乎无问题，待下次回归时检测)
关于使用连接池心跳功能来维护DbMetadata中的DbTimeDelta。(OK)
当使用基于String的Between条件时，路由结果偏少。indexcode BETWEEN ? AND ? (OK)
基于SQL分析的分库分表、对NativeQuery支持的分表分库操作(OK) 
由于Java cc分析器当中的K_START等token优先级大于S_IDENTIFIER，造成jpql参数中不能支持start等名称，(OK)
要支持多表时，使用distinct后进行count时，在内存中先distinct后再count (Criteria不支持，NativeQuery OK)

==========文档补充============
更新文档中的站点
reivew和修订文档
补充性能对比章节
 
==============特性展示===============
特点一
1、Query与Entity的统一，一体两面的事物。 更少的类，更灵活的用法。
2、Query不仅仅是代表查询条件，而是一个完整SQL操作的描述。
3、由Query为核心构成的 Criteria API，解决了xQL和Criteria青黄不接的问题。

特点二，将SQL的使用发挥到极致，解决SQL跨库问题
3、

特点三，追求性能极致

特点四，分库分表

特点五，


特点六、解决一切跨DBMS的移植问题
1、DML操作、自增值处理与返回、查询
2、DDL操作 特点三，不仅仅提供DML封装，也提供DDL的封装和跨库操作
3、SQL语法与函数





================ 待解决的问题  ===================
对于自带分页的SQL语句的解析和支持
将对NativeQuery支持的分库分表功能直接封装为DataSource，从而实现按JDBC驱动的分库分表功能。 考虑用线程变量来传递已经解析好的分表条件.(暂缓)
按主键查询逻辑优化

之前性能测试均为极端情况，测试综合工况，如10条记录左右的查询查询500次耗时。 如update语句更新500次。

申请加入官方仓库
工程合并并更名  (ef-common/ef-orm-core)

用打桩的方法，增加单元测试
为大部分测试案例增加断言

ORM手册继续编写
手册编写完成后将orm-tutorial中的示例封装为单元测试并合并
MSSQL Server方言支持


--------------------------------------------------
关于连接池检查时的checkSQL支持问题...(暂缓)
使用基于差值的数据库时间来代替当前系统时间进行自动维护。（基于差值的数据库时间已经完成了）
javacpp和JNA对比研究，使用JNA重新封rar解压库
支持多语言的错误信息和异常。
HSQLDB的函数对DATE还不支持。HSQLDB中还有很多函数没有写到方言中去（待完成 http://hsqldb.org/doc/2.0/guide/builtinfunctions-chapt.html） 
JoinKey和JoinExpression重构(暂缓)
新场景支持，静态表关联到动态表
支持统一的to_date函数(待验证Hibernate做法) --PG Oracle支持，MYSQL不明 hibernate是否支持在MySQL上模拟？(待测试)
filterCondition中出现的表达式中的函数的多数据库问题(待filtercondition重构实现)
关于filterCondition的出现的表达式认为匹配当前表还是匹配右侧表的问题（默认匹配右侧表）
实际上多对一时，可以填写仅匹配 左侧表的条件，但是当对多时，则必须是匹配右侧表. (以后逐渐完善)
参照这篇文章的例子，关于Spring控制的JTA事务 http://home.51.com/mengwuhen8866/diary/item/10047709.html
关于多重JPA事务的支持方式
对Java新标准JAX-RS的 CXF实现进行进一步封装（OK）
CXF-Plus更新后的手册更新
关于二级缓存的EF-CACHE实现。提取马俊杰的实现。
支持在DataObject中增加一个Map的方式来表述动态字段，形成动静混合的操作对象。