============== 确定已经解决的问题 ==============
读取Sequence initialValue=1000   allocationSize (OK)
关于vsMany和vsOne目前界限正在模糊，需要按照lazy和eager两种方式重新修改。(OK)
读取Table initialValue=1000   valueColumnName   pkColumnValue table   allocationSize (OK)
Hilo实现和 DB_AUTOINCREMENT_HILO （OK）
DB_SEQUENCE_STEP 0和-1的两种不同检测方式(OK)
全局的SequenceTable表名可定义(OK)
AutoIncreatmentCallBack大量使用Property优化(OK)
UUID实现支持removeDash (OK)
hilo模式下的cacheSize可缩小或干脆为1(OK)
Table init value的校准等问题(OK)
PRIMARY KEY的匹配方式(OK)
filterCondition右侧对多加载时的排序和结果限制问题 (OK)
当一个对象中指向同个目标的JoinDescrption配置不同时，被当做是相同的关联查询进行处理。(OK)
AnnotationValueCompare的处理（OK JDK自身已经实现得很好）
当多对一时，fetch=LAZY现在可以生效(OK)
当filterCondition等辅助描述被区分为多种关联时，(OK)
dubbo客户端能否指定URL? (Fixed, OK)
CXF-PLUS重构，补充测试案例，用法变化。(OK)
CXF下发现如将Object注册为JSON转换器，则List等Collection的反序列化数据会丢失，暂时关闭此功能(OK)
同维度下的映射关系分表+分库。。。。设计分析，是否需要改造（分析，暂无需改造，分表规则加载器可以支持）
RoutingConnection连接提交状态错误引起死锁（OK）
启动时metadata及其连接池可能被初始化2次的问题。(OK)
分表时，自增值生成提前，使其能作为分表参数所利用。分表时对于primitive值的有效性判断增强。(OK)
增加MAPPING函数等，简化分库分表规则配置。(OK)
支持按需建表(OK)
修复了ADV TABLE模式下自增生成的若干小错误。
缩小首次建表范围（OK），引发若干测试错误，采用表过滤机制解决。(OK)
不启用按需建表后，需要保留全范围或大范围建表功能（通过DateSpan可配置解决，OK）
修复关于使用FBIField造成单表更新和删除操作尝试绑定Query时空指针异常(OK)
分库分表聚合等支持、对分表分库后混合结果集进行支持（聚合、排序、distinct）OK
分表结果返回错误问题（OK）
Oracle/MSSQL分析函数支持（OK，支持解析）
验证DataObject/VarObject作为Json序列化（REST）和WebService（JAXB）发布时的字段问题。XMLTranilaent JAXB下会出现整个DataObject都是瞬态的，可以完全被忽略)(java序列化，因为DataObject中字段是临时的，故 会被忽略。)(JSON序列化反序列化)
验证Druid解析器是否支持MYSQL的一些写法问题(OK)
重构，将拼装从连接池上剥离(OK)；，将池检查逻辑内建到连接池上。(OK)
词法树的Clone问题。现在可以实现对词法树的安全改写了。(OK)
start with connect by的内存计算方案(OK,NativeQuery支持)
级联操作时两个字段不一致时的update/insert问题(从目前测试看来，API逻辑是正确的。是否检查...)(OK)
完善JEF的JMX监控(OK)
update语句中的set语句现在也可以根据表达式省略。(OK)
Batch的极限模式。(不返回值、性能分析等手段)、此外对于Batch可能需要统计并输出因为Sequence而消耗的时间（--），Oracle下的实现特殊优化 hint, no logging
——极限模式下：启用该数据库本身的特殊优化操作——no logging /*+APPEND */ 等。极限模式下不回写自增值等。 (OK,测试数据已收集)
仿照MyBatis，将包扫描和session初始化都用一个Bean来构造(OK)
@DataSource方式标注的表现在还不能通过SQL路由。(OK)
统一支持Limit作为分页关键字。（考虑到解析出SQL中分页参数的复杂性，统一使用limit。而分库分表对用户是透明的，因此我们只能让用户所有传入的所有分页查询都使用Limit。因此对于那些不支持LIMIT关键字的数据库（derby），我们希望NativeQuery和JDataSource都能正确处理Limit关键字。(OK)
支持orderby注解(OK，同时原先的JoinDescrption中的orderBy去除，文档已修订)
MSSQL Server方言支持(OK)
部分SQL解析采用Druid解析器，进一步提高性能(OK)

============== 基本上解决的问题 ==============
CXF 2.7.10提高了兼容性，但是CXF-Plus的ASM类产生的package-info不兼容 (无法重现，修订CXF-PLUS中的引用，怀疑还是和包冲突有关，修订，暂时算OK)
对启用表过滤机制后，造成无表输出后的查询返回空结果集场景进行支持和测试(应该OK 测试了一下增加案例，似乎无问题，待下次回归时检测)
关于使用连接池心跳功能来维护DbMetadata中的DbTimeDelta。(OK)
当使用基于String的Between条件时，路由结果偏少。indexcode BETWEEN ? AND ? (OK)
基于SQL分析的分库分表、对NativeQuery支持的分表分库操作(OK) 
由于Java cc分析器当中的K_START等token优先级大于S_IDENTIFIER，造成jpql参数中不能支持start等名称，(OK)
要支持多表时，使用distinct后进行count时，在内存中先distinct后再count (Criteria不支持，NativeQuery OK)
将对NativeQuery支持的分库分表功能直接封装为DataSource，从而实现按JDBC驱动的分库分表功能。(OK)
org.easyframe.tutorial.lesson7.Case1.testLimitKeyword()中关于NAtiveQuery的count问题。(OK)
在NativeQuery中传入limit语句所引发了一系列问题。(OK)
对于自带分页的SQL语句的解析和支持(OK，统一携带limit关键字)
在JTA事务过程中，框架内部其实没有必要再开启事务，而现在不得不为resultholder和cascade等场景开启事务(OK)
修复了关于notnull注解未被识别的问题。 （OK）
修复关于null关键字不在alter table中出现造成反复改表的问题 (OK)
修复关于JTA场合下创建SEQ要再启动时进行的问题， (OK)
在 JTA场合下，按需建表功能将失败问题 (OK,　可以根据当前事务模式选择是采用哪种执行器)
屏蔽JTA模式下的setAutoCommic commit rollback等不应该有的操作(OK)
新增案例支持——Hibernate共享事务、JTA事务(OK)
重构，取消特殊的metadata连接池。共用统一的连接池。(OK)
其他和JTA有关的混合事务支持案例编写(OK)
优化reorder算法(OK)
一级缓存的主键优化(OK)

==========文档补充============
更新文档中的站点
reivew和修订文档
补充性能对比章节, OLTP章节
统一使用limit关键字改写为当前数据库的分页（可以多库兼容）

在使用JDataSource时，因为要实现分库后的分页功能，所以必须从SQL语句中解析出分页参数。
而不同数据库的分页语句写法变化非常大，（如ORacle，SQLSErver）,综合考虑后，框架让传入的SQL语句统一使用LIMIT关键字来描述分页。

 发现MariaDB的驱动1.1.1~1.1.7版本中GeneratedKeys特性错误.不宜使用。记录
 
 atomikos是分布式事务的解决方案
1\H框架JTA事务 (OK)
2JEF JTA事务   (OK)
3 H框架、JEF共同参与JTA事务。可以，由atomikos内部基于线程分配事务。同一线程的操作被划分在一个事务中。(OK)
4 H框架，JMS,JEF共存情况下的事务配置 (东方通为例。)基本完成，由于TongLinkQ的问题案例没跑通。

编写《论一种新的多结果集排序算法》

测试新增的几个接口.(OK待文档)

准备WebService培训大纲

新增的SessionFactory属性

==============特性展示===============
特点一

特点：用简单的API操作数据库的DDL(建表、删表、操作索引、修改表)


1、Query与Entity的统一，一体两面的事物。 更少的类，更灵活的用法。
2、Query不仅仅是代表查询条件，而是一个完整SQL操作的描述。
3、由Query为核心构成的 Criteria API，解决了xQL和Criteria青黄不接的问题。

特点二，将SQL的使用发挥到极致，解决SQL跨库问题
3、

特点三，追求性能极致

特点四，分库分表

特点五，提供统一的API访问和维护数据库结构，


特点六、傻瓜式

解决一切跨DBMS的移植问题

1、DML操作、自增值处理与返回、查询
2、DDL操作 特点三，不仅仅提供DML封装，也提供DDL的封装和跨库操作
3、SQL语法与函数


================ 待解决的问题  ===================

支持半动态表模型(进行了一部分)


SQLServer2000下，当记录数不足时，分页结果不正确

更新性能分析报告。关于oltp类操作优化

参考guzz，在一定程度上解决多表操作情况下分库分表的问题
参考并引用Guzz的一些文档https://code.google.com/p/guzz/wiki/AboutGuzz?wl=zh-Hans

代码审核

运维测试
http://172.10.34.209:9090/coms
adminhik
123456

支持读写分离模式

使用外部配置文件来配置分库分表JDataSource

申请加入官方仓库、工程合并并更名  (ef-common/ef-orm-core)

ORM手册继续编写

手册编写完成后将orm-tutorial中的示例封装为单元测试并合并

用打桩的方法，增加单元测试、为大部分测试案例增加断言

--------------------------------------------------
关于连接池检查时的checkSQL支持问题...(暂缓)
在其他的垂直分表的情况下，异构数据库的方言如果不是默认数据库将失效的问题(两轮重构完成，最后待测试完善，暂缓)
从马俊杰版本合并单元测试。.(暂缓)
还可以将dubbo调用也封装到JTA事务中，这样今后程序的可靠性进一步增强
 考虑用线程变量来传递已经解析好的分表条件.(暂缓，待下一轮重构后实现)
使用基于差值的数据库时间来代替当前系统时间进行自动维护。（基于差值的数据库时间已经完成了）
javacpp和JNA对比研究，使用JNA重新封rar解压库
支持多语言的错误信息和异常。
HSQLDB的函数对DATE还不支持。HSQLDB中还有很多函数没有写到方言中去（待完成 http://hsqldb.org/doc/2.0/guide/builtinfunctions-chapt.html） 
JoinKey和JoinExpression重构(暂缓)
新场景支持，静态表关联到动态表
支持统一的to_date函数(待验证Hibernate做法) --PG Oracle支持，MYSQL不明 hibernate是否支持在MySQL上模拟？(待测试)
filterCondition中出现的表达式中的函数的多数据库问题(待filtercondition重构实现)
关于filterCondition的出现的表达式认为匹配当前表还是匹配右侧表的问题（默认匹配右侧表）
实际上多对一时，可以填写仅匹配 左侧表的条件，但是当对多时，则必须是匹配右侧表. (以后逐渐完善)
参照这篇文章的例子，关于Spring控制的JTA事务 http://home.51.com/mengwuhen8866/diary/item/10047709.html
关于多重JPA事务的支持方式
对Java新标准JAX-RS的 CXF实现进行进一步封装（OK）
CXF-Plus更新后的手册更新
关于二级缓存的EF-CACHE实现。提取马俊杰的实现。
支持在DataObject中增加一个Map的方式来表述动态字段，形成动静混合的操作对象。