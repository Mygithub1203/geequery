===========已经解决的问题===================
事务模式问题，增加独立提交模式。(OK，增加选项)

==========文档补充============
更新文档中的站点
reivew和修订文档
补充性能对比章节, OLTP章节
统一使用limit关键字改写为当前数据库的分页（可以多库兼容）

在使用JDataSource时，因为要实现分库后的分页功能，所以必须从SQL语句中解析出分页参数。
而不同数据库的分页语句写法变化非常大，（如ORacle，SQLSErver）,综合考虑后，框架让传入的SQL语句统一使用LIMIT关键字来描述分页。

 发现MariaDB的驱动1.1.1~1.1.7版本中GeneratedKeys特性错误.不宜使用。记录
 
 atomikos是分布式事务的解决方案
1\H框架JTA事务 (OK)
2JEF JTA事务   (OK)
3 H框架、JEF共同参与JTA事务。可以，由atomikos内部基于线程分配事务。同一线程的操作被划分在一个事务中。(OK)
4 H框架，JMS,JEF共存情况下的事务配置 (东方通为例。)基本完成，由于TongLinkQ的问题案例没跑通。

编写《论一种新的多结果集排序算法》

测试新增的几个接口.(OK待文档)

准备WebService培训大纲

新增的SessionFactory属性

==============特性展示===============
特点一：轻量的查询API，将Criteria、主键操作、NativeQuery等连成一体（共同使用一级缓存）
1、Query与Entity的统一，一体两面的事物。 更少的类，更灵活的用法。
2、Query不仅仅是代表查询条件，而是一个完整SQL操作的描述。
3、由Query为核心构成的 Criteria API，解决了xQL和Criteria青黄不接的问题。


特点二，将SQL的使用发挥到极致，解决SQL跨库问题


特点三，追求性能极致


特点四，分库分表


特点五，提供统一的API访问和维护数据库结构，
用简单的API操作数据库的DDL(建表、删表、操作索引、修改表)


特点六、解决一切跨DBMS的移植问题
1、DML操作、自增值处理与返回、查询
2、DDL操作 特点三，不仅仅提供DML封装，也提供DDL的封装和跨库操作
3、SQL语法与函数


================ 待解决的问题  ===================
0、先重构一轮，解决因为nativeQuery和JdataSource支持分库分表以后较为凌乱的代码。内存处理等(暂时先到这里）
1、多线程并发多库查询 (OK)

2、读写分离设计，镜像，RAC支持。   (估计工作量较大，考虑先简单实现)

从功能上讲，读写分离的主要原则是读操作用一个连接，写操作用另一个连接。
读连接本身没有事务，写操作独立构成事务，。

    近期EF-ORM完成了以下功能——
1、SQLServer支持
2、一级缓存的主键访问优化
3、支持半动态模型映射动态表
4、逐步改用Druid词法分析器来提高性能
 
 
 
 从cobar tddl等的经验看，在ORM层上直接添加读写分离不是一个很好的想法。
 甚至之前直接在DataSource上做是哦无控制
 
 
1、多种读写模式
   a）单库模式
           使用一个数据库的模式。单库模式下，事务模式可配置为JPA或JDBC。前者实现标准JPA事务（有扩展）。后者可以和Hibernate或者JDBCTemplate等其他框架共享事务。
   b) 普通模式
             多个数据库配置为多个数据源。每次操作按路由结果进行操作。事务模式可配置为 JPA或JTA。JTA模式下ORM不处理事务。
             JPA模式下，默认为顺序提交连接，一旦出错则该连接和后续连接会被回滚。(也可开启开关，在提交时所有数据库都将被提交一次。)
             
             
写分离的数据源：设计一个数据源，当遇到读
             
             
             
 
   c) 读写分离模式
将读库和写库分为两个数据源。读操作时使用读数据源，写操作时使用写数据源。事务模式独立。其中读库均为无事务的readonly模式。
要注意实现的特性：
   1、某些表根据配置：读操作使用A连接（从库），写操作使用B连接（主库）。 如果没有配置，那么所有的操作还是使用主库。
   2 多表查询时防止出现重复查询数据。
   3 和分库分表功能一起使用。(包括NativeQuery也需要支持)
   4 相同的条件，计算路由时，读的时候使用读库；写的时候使用写库。
   5 提交时，读库因为autoCommit开启(无事务)，因此无需提交。仅提交写库。
 
  d) Oracle RAC事务支持模式 。将ORACLE的RAC库作为多个数据源。操作时，相同分库分表条件的记录都在一个连接上操作。
 
   1、此模式和普通模式下多数据源在使用上又有些区别。由于两个数据源的数据是完全一样的，因此读写操作关系是排他的，也就是说只要执行一次就够了。
        在执行某些跨库查询时，实际上不应该将其当做两个数据源再执行union，会产生两倍的结果。
   2、由于两个数据库是具备互换性，因此为了轻量化事务，可以由第一笔写操作所在的连接来决定整比事务需要在哪个连接上实现
 
 
由于读写库互为镜像，我设想在数据源中也建议这样一个主从的镜像关系。而不是直接将这些数据源当做是不同的数据库处理。
目前社区版EF-ORM没有太多的负担，整块功能怎么实现可以从头想清楚来做。
另外，之前的native query支持数据路由，以及 JDataSource （一个带路由功能的DataSource）两块功能还有点凌乱，有空也可帮我看看。
 


3、使用外部配置文件来配置分库分表JDataSource 

4、ORM手册继续编写
5、JEFPlugin提供下载
6、修复文档中的链接地址
    github.io文档编写

7、文档中，将SiteMapping包装为虚拟shard映射
8、更新性能分析报告。关于oltp类操作优化(文档)
10、参考guzz，在一定程度上解决多表操作下分库分表的问题
参考并引用Guzz的一些文档https://code.google.com/p/guzz/wiki/AboutGuzz?wl=zh-Hans
11、申请加入官方仓库、工程合并并更名  (ef-common/ef-orm-core)


--------------------------------------------------

测试Greenplum支持
手册编写完成后将orm-tutorial中的示例封装为单元测试并合并
用打桩的方法，增加单元测试、为大部分测试案例增加断言
关于连接池检查时的checkSQL支持问题...(暂缓)
在其他的垂直分表的情况下，异构数据库的方言如果不是默认数据库将失效的问题(两轮重构完成，最后待测试完善，暂缓)
从马俊杰版本合并单元测试。.(暂缓)
还可以将dubbo调用也封装到JTA事务中，这样今后程序的可靠性进一步增强
 考虑用线程变量来传递已经解析好的分表条件.(暂缓，待下一轮重构后实现)
使用基于差值的数据库时间来代替当前系统时间进行自动维护。（基于差值的数据库时间已经完成了）
javacpp和JNA对比研究，使用JNA重新封rar解压库
支持多语言的错误信息和异常。
HSQLDB的函数对DATE还不支持。HSQLDB中还有很多函数没有写到方言中去（待完成 http://hsqldb.org/doc/2.0/guide/builtinfunctions-chapt.html） 
JoinKey和JoinExpression重构(暂缓)
新场景支持，静态表关联到动态表
支持统一的to_date函数(待验证Hibernate做法) --PG Oracle支持，MYSQL不明 hibernate是否支持在MySQL上模拟？(待测试)
filterCondition中出现的表达式中的函数的多数据库问题(待filtercondition重构实现)
关于filterCondition的出现的表达式认为匹配当前表还是匹配右侧表的问题（默认匹配右侧表）
实际上多对一时，可以填写仅匹配 左侧表的条件，但是当对多时，则必须是匹配右侧表. (以后逐渐完善)
参照这篇文章的例子，关于Spring控制的JTA事务 http://home.51.com/mengwuhen8866/diary/item/10047709.html
关于多重JPA事务的支持方式
对Java新标准JAX-RS的 CXF实现进行进一步封装（OK）
CXF-Plus更新后的手册更新
关于二级缓存的EF-CACHE实现。提取马俊杰的实现。
支持在DataObject中增加一个Map的方式来表述动态字段，形成动静混合的操作对象。



