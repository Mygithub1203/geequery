EF-ORM特性导读




特点一
     EF的设计的一个主要目的是提高开发效率，减少编码工作。为此，可以让开发者“零配置”“少编码”的操作数据库大部分功能。而数据库查询条件问题是所有框架都不能回避的一个问题，所以我经常在想——既然我们可以用向DAO传入一个Entity来实现插入操作，为什么就不能用同样的方法来描述一个不以主键为条件的update/select/delete操作？为什么DAO的接口参数老是变来变去？为什么很多应用中，自行设计开发类来描述各种业务查询条件才能传入DAO？为什么我们不能在数据访问层上花费更少的时间和精力?
　　JPA1.0和早期的H框架，其思想是将关系型数据库抽象为对象池，这极大的限制了本来非常灵活的SQL语句的发挥空间。而本质上，当我们调用某H框架的session.get、session.load、session.delete时，我们是想传递一个以对象形式表达的数据库操作请求。只不过某H框架要求（并且限制）我们将其视作纯粹的“单个”对象而已。JPA 2.0为了弥补JPA1.0的不足，才将这种Query的思想引入为框架中的另一套查询体系——Criteria API。事实上针对单个对象的get/load/persist/save/update/merge/saveOrUpdate API和Criteria API本来就为一体，只不过是历史的原因被人为割裂成为两套数据库操作API罢了。
　　因此，对于关系型数据库而言——Entity和Query是一体两面的事物，所谓Query，可以包含各种复杂的查询条件，甚至可以作为一个完整的SQL操作请求的描述。为此，EF彻底将Entity和Query绑在了一起。这种思想，使得——
    1 开发人员需要编写的类更少。开发人员无需编写其他类来描述复杂的SQL查询条件。也无需编写代码将这些查询条件转换为SQL/HQL/JPQL。DAO层也不会有老要改来改去的接口和API，几乎可以做到零编码。
    2 对单个对象进行CRUD的操作API现在和Criteria API合并在一起。Session对象可以直接提供原本要Criteria API才能提供实现的功能。API大大简化。
    3 IQueryableEntity允许你将一个实体直接变化为一个查询（Query），在很多时候可以用来完成复杂条件下的数据查询。比如 ‘in (?,?,?)’， ‘Between 1 and 10’之类的条件。
xxQL有着拼装语句可读性差、编译器无法检查、变更维护困难等问题，但是却广受开发人员欢迎。这多少有历史原因，也有Criteria API设计上过于复杂的因素。两者一方是极端灵活但维护困难，一方是严谨强大而学习和编写繁琐，两边都是极端。事实上JPA的几种数据查询方式存在青黄不接的问题。选择查询语言xxQL，项目面临后续维护困难，跨数据库移植性差；选择Criteria API，代码臃肿，操作繁琐，很多人望而却步。EF的设计思想是使人早日摆脱拼装SQL/HQL/JPQL的困扰，而是用（更精简易用的）Criteria API来操作数据库。
    4、基于轻量级Criteria API的操作方式，使得对数据库的变更和重构变得非常轻松，解决了SQL语句多对软件维护和移植造成产生的不利影响。

阅读推荐：第3、4章


特点二，将SQL的使用发挥到极致，解决SQL拼凑问题、数据库移植问题
   大部分OLTP应用系统到最后都不免要使用SQL/JPQL然而没有一个很好的方法解决SQL语句和函数跨库的问题。
   EF中除了Criteria API以外，其他操作方式就是SQL了，但是和HQL一样，这种所谓的SQL是一种能跨数据库操作的语言。(E-SQL)
   E-SQL不但解决了异构数据库的语法问题、函数问题、特殊的写法问题，还解决了动态SQL问题、绑定变量扩展等特性。
   其函数支持也要多于HQL支持的函数。

阅读推荐：第7、8章

   
特点三，追求性能极致
     实际性能测试表名，EF的大部分操作都要快于Hiberante和MyBatis， 部分操作速度甚至数十倍于上述框架。
EF在极限插入模式下，甚至刷新了每秒10万条写入的记录。远远超过了其他框架。
（此部分测试数据尚不够全面，待补充）

阅读推荐：第9、17章


特点四，分库分表

   Google Hibernate Shards也好，Alibaba TDDL也好，它们有的功能EF都有。EF有的功能，它们未必有。

   阅读推荐：第10章

特点五，JDBC的全面封装

   从悲观锁到存储过程调用，从流式操作到ROWID，从generate Key到JDBC版本分析，从数据库元数据访问，到各种DDL操作。凡是JDBC支持的功能，EF没有理由不提供给用户。


特点六、解决一切跨DBMS的移植问题
1、DML操作、自增值处理与返回、查询这些不同数据库操作差异很大的东西，都了统一的封装。
2、DDL操作、建表、删表、trunacte，Sequence创建和TABLE模拟Sequence等，都做了支持。
3、对SQL语法操作和函数的改写与支持。


